# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_inf_ufg_dataset.ipynb.

# %% auto 0
__all__ = ['InfUFGDataset']

# %% ../nbs/03_inf_ufg_dataset.ipynb 2
from torch.utils.data import Dataset, DataLoader
from pathlib import Path
import numpy as np

# %% ../nbs/03_inf_ufg_dataset.ipynb 3
class InfUFGDataset(Dataset):
    "Load the inf_ufg data in a pytorch Dataset object."
    def __init__(self, data_path, is_train=True, transform=None):
        data_path = Path(data_path)
        self.velodyne_path = data_path/'sequences'

        # how much sequences?
        velodyne_fns = []
        if is_train: 
            query = '*0[0-9]/velodyne/*.bin'
            velodyne_fns += list(self.velodyne_path.rglob(query))
        # validation?
        else:
            pass
    
        self.frame_ids = [fn.stem for fn in velodyne_fns]
        self.frame_sequences = [fn.parts[-3] for fn in velodyne_fns]    

        self.transform = transform
        self.is_train = is_train

    def set_transform(self, transform):
        self.transform = transform

    def __len__(self):
        return len(self.frame_ids)

    def __getitem__(self, idx):
        frame_id = self.frame_ids[idx]
        frame_sequence = self.frame_sequences[idx]
        
        frame_path = self.velodyne_path/frame_sequence/'velodyne'/(frame_id + '.bin')
        with open(frame_path, 'rb') as f:
            frame = np.fromfile(f, dtype=np.float32).reshape(-1, 4)

        # Removing NAN 
        frame = frame[~np.isnan(frame).any(axis=1)]

        # Normalizing the reflectance values (which are between 0 and 255).
        frame[:,3] = frame[:,3]/255
        
        label = None
        if self.is_train:
            # The code to load the labels in the future will be here.
            pass
        
        mask = None
        if self.transform:
            frame, label, mask = self.transform(frame, label)
        
        return frame, label, mask

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_datatools.ipynb.

# %% auto 0
__all__ = ['SemanticKITTIDataset', 'SphericalProjectionTransform', 'ProjectionVizTransform']

# %% ../nbs/00_datatools.ipynb 2
import torch
from torch.utils.data import Dataset
from torch import nn
import yaml
from pathlib import Path
import numpy as np
from torchvision.transforms import v2

# %% ../nbs/00_datatools.ipynb 3
class SemanticKITTIDataset(Dataset):
    "Load the SemanticKITTI data in a pytorch Dataset object. The data is not downloaded automatically."
    def __init__(self, data_path):
        data_path = Path(data_path)
        yaml_path = data_path/"semantic-kitti.yaml"
        self.velodyne_path = data_path/"velodyne"
        self.labels_path = data_path/"labels"
        
        velodyne_fns = list(self.velodyne_path.glob('*.bin'))
        self.frame_ids = [fn.stem for fn in velodyne_fns]
        
        with open(yaml_path, 'r') as file:
            metadata = yaml.safe_load(file)
        
        self.labels_dict = metadata.get('labels', {})
        self.learning_map = metadata.get('learning_map', {})
        self.learning_map_inv = metadata.get('learning_map_inv', {})
        self.color_map_bgr = metadata.get('color_map', {})
        
        self.transform = None

    def set_transform(self, transform):
        self.transform = transform
    
    def __len__(self):
        return len(self.frame_ids)

    def __getitem__(self, idx):
        frame_id = self.frame_ids[idx]
        
        frame_path = self.velodyne_path/(frame_id + '.bin')
        with open(frame_path, 'rb') as f:
            frame = np.fromfile(f, dtype=np.float32).reshape(-1, 4)
        # frame = torch.from_numpy(frame)
        
        label_path = self.labels_path/(frame_id + '.label')
        with open(label_path, 'rb') as f:
            label = np.fromfile(f, dtype=np.uint32)
            label = label & 0xFFFF
        label = np.vectorize(self.learning_map.get)(label)
        label = label.astype(int)
        # label = torch.from_numpy(label)
        
        if self.transform:
            frame, label = self.transform(frame, label)
        
        return frame, label

# %% ../nbs/00_datatools.ipynb 6
class SphericalProjectionTransform(nn.Module):
    "Pytorch transform that turns a point cloud frame and its respective label into spherical projection images."
    def __init__(self, fov_up_deg, fov_down_deg, W, H):
        super().__init__()
        self.fov_up_rad = (fov_up_deg/180.)*np.pi
        self.fov_down_rad = (fov_down_deg/180.)*np.pi
        self.fov_rad = abs(self.fov_down_rad) + abs(self.fov_up_rad)
        self.W = W
        self.H = H
        
    def forward(self, frame, label):
        # get point_cloud components
        scan_xyz = frame[:,:3]
        reflectance = frame[:, 3]

        assert reflectance.max() <= 1.
        assert reflectance.min() >= 0.

        # get depths of all points
        depth = np.linalg.norm(scan_xyz, 2, axis=1)
        
        # get angles of all points
        yaw = np.arctan2(scan_xyz[:,1], scan_xyz[:,0])
        pitch = np.arcsin(scan_xyz[:,2] / depth)
        
        # get projections in image coords (between [0.0, 1.0])
        proj_x = 0.5 * (yaw / np.pi + 1.0)
        proj_y = (abs(self.fov_up_rad) - pitch)/self.fov_rad

        assert proj_x.min() >= 0.
        assert proj_x.max() <= 1.
        assert proj_y.min() >= 0.
        assert proj_y.min() <= 1.
        
        # scale to image size using angular resolution (between [0.0, W/H])
        proj_x *= self.W
        proj_y *= self.H
        
        # round and clamp to use as indices (between [0, W/H - 1])
        proj_x = np.floor(proj_x)
        proj_x = np.clip(proj_x, 0, self.W - 1).astype(int)
        
        proj_y = np.floor(proj_y)
        proj_y = np.clip(proj_y, 0, self.H - 1).astype(int)
        
        # order in decreasing depth
        order = np.argsort(depth)[::-1]
        scan_xyzrdl = np.concatenate((scan_xyz, 
                                      reflectance[..., np.newaxis],
                                      depth[..., np.newaxis],
                                      label[..., np.newaxis]),
                                     axis=-1)
        scan_xyzrdl = scan_xyzrdl[order]
        proj_y = proj_y[order]
        proj_x = proj_x[order]
        
        # setup the image tensor
        projections_img = np.zeros((self.H, self.W, 6))
        projections_img[:,:,-1] -= 1 # this helps to identify points in the projection with no lidar readings
        projections_img[proj_y, proj_x] = scan_xyzrdl
        
        # frame image
        frame_img = projections_img[:,:,:-1]
        #frame_img = torch.from_numpy(frame_img)
        # label image
        label_img = projections_img[:,:,-1].astype(int)
        #label_img = torch.from_numpy(label_img)
        # mask image
        mask_img = projections_img[:,:,-1]>=0
        #mask_img = torch.from_numpy(mask_img)
        
        return frame_img, label_img, mask_img

# %% ../nbs/00_datatools.ipynb 7
class ProjectionVizTransform(nn.Module):
    "Pytorch transform to preprocess sphererical projection images for proper visualization."
    def __init__(self, color_map_bgr, learning_map_inv):
        super().__init__()
        self.learning_map_inv_np = np.zeros((len(learning_map_inv),))
        for k, v in learning_map_inv.items():
            self.learning_map_inv_np[k] = v
        
        max_key = sorted(color_map_bgr.keys())[-1]
        self.color_map_rgb_np = np.zeros((max_key+1, 3))
        for k, v in color_map_bgr.items():
            self.color_map_rgb_np[k] = np.array(v[::-1], np.float32)
    
    def normalize(self, img, min_value, max_value):
        assert img.max() <= max_value
        assert img.min() >= min_value
        assert max_value > min_value
        
        img = img.clip(min_value, max_value)
        return (255.*(img - min_value)/(max_value - min_value)).astype(int)
    
    def forward(self, frame_img, label_img, mask_img):
        x = self.normalize(frame_img[:,:,0], -100., 100.)
        y = self.normalize(frame_img[:,:,1], -100., 100.)
        z = self.normalize(frame_img[:,:,2], -20., 5.)
        r = self.normalize(frame_img[:,:,3], 0., 1.)
        d = self.normalize(frame_img[:,:,4], 0., 100.)
        normalized_frame_img = np.stack((x, y, z, r, d), axis=-1)
        
        label_img[mask_img] = self.learning_map_inv_np[label_img[mask_img]]
        colored_label_img = np.zeros(label_img.shape + (3,))
        colored_label_img[mask_img] = self.color_map_rgb_np[label_img[mask_img]]
        
        colored_label_img = colored_label_img.astype(int)
        #colored_label_img = torch.from_numpy(colored_label_img)
        
        return normalized_frame_img, colored_label_img
